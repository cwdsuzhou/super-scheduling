/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cwdsuzhou/super-scheduling/pkg/apis/scheduling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TopologySchedulingPolicyLister helps list TopologySchedulingPolicies.
// All objects returned here must be treated as read-only.
type TopologySchedulingPolicyLister interface {
	// List lists all TopologySchedulingPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopologySchedulingPolicy, err error)
	// TopologySchedulingPolicies returns an object that can list and get TopologySchedulingPolicies.
	TopologySchedulingPolicies(namespace string) TopologySchedulingPolicyNamespaceLister
	TopologySchedulingPolicyListerExpansion
}

// topologySchedulingPolicyLister implements the TopologySchedulingPolicyLister interface.
type topologySchedulingPolicyLister struct {
	indexer cache.Indexer
}

// NewTopologySchedulingPolicyLister returns a new TopologySchedulingPolicyLister.
func NewTopologySchedulingPolicyLister(indexer cache.Indexer) TopologySchedulingPolicyLister {
	return &topologySchedulingPolicyLister{indexer: indexer}
}

// List lists all TopologySchedulingPolicies in the indexer.
func (s *topologySchedulingPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.TopologySchedulingPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopologySchedulingPolicy))
	})
	return ret, err
}

// TopologySchedulingPolicies returns an object that can list and get TopologySchedulingPolicies.
func (s *topologySchedulingPolicyLister) TopologySchedulingPolicies(namespace string) TopologySchedulingPolicyNamespaceLister {
	return topologySchedulingPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TopologySchedulingPolicyNamespaceLister helps list and get TopologySchedulingPolicies.
// All objects returned here must be treated as read-only.
type TopologySchedulingPolicyNamespaceLister interface {
	// List lists all TopologySchedulingPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopologySchedulingPolicy, err error)
	// Get retrieves the TopologySchedulingPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TopologySchedulingPolicy, error)
	TopologySchedulingPolicyNamespaceListerExpansion
}

// topologySchedulingPolicyNamespaceLister implements the TopologySchedulingPolicyNamespaceLister
// interface.
type topologySchedulingPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TopologySchedulingPolicies in the indexer for a given namespace.
func (s topologySchedulingPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TopologySchedulingPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopologySchedulingPolicy))
	})
	return ret, err
}

// Get retrieves the TopologySchedulingPolicy from the indexer for a given namespace and name.
func (s topologySchedulingPolicyNamespaceLister) Get(name string) (*v1alpha1.TopologySchedulingPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("topologyschedulingpolicy"), name)
	}
	return obj.(*v1alpha1.TopologySchedulingPolicy), nil
}
